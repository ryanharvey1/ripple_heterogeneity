% Code to update recording sessions with:
% cell metrics, spikes.cellinfo, and SWRunitMetrics

% GrosmarkAD
files_to_redo = {'A:\Data\GrosmarkAD\Cicero\Cicero_09012014',...
    'A:\Data\GrosmarkAD\Cicero\Cicero_09102014',...
    'A:\Data\GrosmarkAD\Cicero\Cicero_09172014',...
    'A:\Data\GrosmarkAD\Buddy\Buddy_06272013',...
    'A:\Data\GrosmarkAD\Achilles\Achilles_10252013',...
    'A:\Data\GrosmarkAD\Achilles\Achilles_11012013',...
    'A:\Data\GrosmarkAD\Gatsby\Gatsby_08022013',...
    'A:\Data\GrosmarkAD\Gatsby\Gatsby_08282013'...
    'A:\OptoMECLEC\OML18\day1',...
    'A:\OptoMECLEC\OML18\day2',...
    'A:\OptoMECLEC\OML18\day4',...
    'A:\OptoMECLEC\OML18\day5',...
    'A:\OptoMECLEC\OML19\day2',...
    'A:\OptoMECLEC\OML19\day3',...
    'A:\Data\AB3\AB3_47_49',...
    'A:\Data\AB3\AB3_50_51',...
    'A:\Data\AB3\AB3_55_57',...
    'A:\Data\AB3\AB3_60',...
    'A:\Data\Kenji\ec013.895_902'};

basepath = files_to_redo{19};
basename = bz_BasenameFromBasepath(basepath);
basename = 'ec013.895_902';

%% rename spikes.cellinfo and cell_metrics.cellinfo as to preserve that data
if exist(fullfile(basepath,[basename,'.spikes.cellinfo.mat']),'file') &&...
        ~exist(fullfile(basepath,[basename,'.spikes.cellinfo.legacy.mat']),'file')
    load(fullfile(basepath,[basename,'.spikes.cellinfo.mat']))
    save(fullfile(basepath,[basename,'.spikes.cellinfo.legacy.mat']))
end

if exist(fullfile(basepath,[basename,'.cell_metrics.cellinfo.mat']),'file') &&...
        ~exist(fullfile(basepath,[basename,'.cell_metrics.cellinfo.legacy.mat']),'file')
    load(fullfile(basepath,[basename,'.cell_metrics.cellinfo.mat']))
    save(fullfile(basepath,[basename,'.cell_metrics.cellinfo.legacy.mat']))
end
%% save session
if ~exist([basename '.session.mat'],'file')
    session = sessionTemplate(basepath,'showGUI',false); % 
    save([basename '.session.mat'],'session');
end
%% load spikes
spikes = loadSpikes(...
                    'basepath',basepath,...
                    'basename',basename,...
                    'saveMat',true,...
                    'format','Klustakwik',...
                    'getWaveformsFromDat',false,...
                    'getWaveformsFromSource',true,...
                    'forceReload',true);
                
%% detect ripples
if ~exist(fullfile(basepath,[basename,'.ripplesALL.event.mat']),'file') ||...
        ~exist(fullfile(basepath,[basename,'.ripples.events.mat']),'file')
    
    disp('finding best ripple and sharp wave channels')
    swrCh = bz_swrChannels('basepath',basepath,'basename',basename,'Manual',true);
    
    load(fullfile(basepath,[basename '.swrCh.mat']))

    disp('detecting ripples')
    ripples = bz_DetectSWR([swrCh.ripple swrCh.sharpwave],'saveMat',true,'basename',basename);
    
    disp('refining ripples by mua')    
    ripples = eventSpikingTreshold(ripples,'spikes',spikes,'spikingThreshold',0.5); 
    
    save(fullfile(basepath,[basename '.ripples.events.mat']),'ripples')
end
%% make cell metrics
cell_metrics = ProcessCellMetrics('basepath',basepath,...
    'showGUI',false,...
    'spikes',spikes,...
    'getWaveformsFromDat',false);

%% add ca1 depth and region
if ~isfield(cell_metrics,'CA1depth') && isfield(cell_metrics,'Cell_Position')
    cell_metrics.CA1depth = cell_metrics.Cell_Position;
    save(fullfile(basepath,[basename '.cell_metrics.cellinfo.mat']),'cell_metrics')
elseif ~isfield(cell_metrics,'CA1depth')
    cell_metrics.CA1depth = cell_metrics.deepSuperficialDistance;
    save(fullfile(basepath,[basename '.cell_metrics.cellinfo.mat']),'cell_metrics')
end     

if contains(basepath,'Kenji')
    cell_metrics.brainRegion = get_kenji_region('basepath',basepath,...
        'basename',basename);
    save(fullfile(basepath,[basename '.cell_metrics.cellinfo.mat']),'cell_metrics')
end

if sum(contains(cell_metrics.brainRegion,'Unknown')) == length(cell_metrics.brainRegion)
    cell_metrics.brainRegion = cell_metrics.region;
    save(fullfile(basepath,[basename '.cell_metrics.cellinfo.mat']),'cell_metrics')
end

if sum(cellfun(@isempty,cell_metrics.brainRegion)) == length(cell_metrics.brainRegion)
    cell_metrics.brainRegion = spikes.region;
    save(fullfile(basepath,[basename '.cell_metrics.cellinfo.mat']),'cell_metrics')
end

%% GUI to manually curate cell classification
cell_metrics = CellExplorer('metrics',cell_metrics);


%% make swr metrics
% load all ripples
if exist(fullfile(basepath,[basename,'.ripplesALL.event.mat']),'file')
    load(fullfile(basepath,[basename,'.ripplesALL.event.mat']))
elseif exist(fullfile(basepath,[basename,'.ripples.events.mat']),'file')
    load(fullfile(basepath,[basename,'.ripples.events.mat']))
end
% load position behavior file in order to get epochs
load(fullfile(basepath,[basename,'.position.behavior.mat']))
% extract epochs
epoch_struct = position.Epochs;
epochs = fields(epoch_struct);
% set up empty var for swr struct
SWRunitMetrics = [];
% check through possible epoch types and add results to SWRunitMetrics
if any(contains(epochs,'PREEpoch'))
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                ripples,...
                                                SWRunitMetrics,...
                                                epochs,...
                                                epoch_struct,...
                                                'PREEpoch',...
                                                'pre');
end
if any(contains(epochs,'MazeEpoch')) 
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                ripples,...
                                                SWRunitMetrics,...
                                                epochs,...
                                                epoch_struct,...
                                                'MazeEpoch',...
                                                'task');    
end
if any(contains(epochs,'POSTEpoch')) 
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                ripples,...
                                                SWRunitMetrics,...
                                                epochs,...
                                                epoch_struct,...
                                                'POSTEpoch',...
                                                'post');    
end

save(fullfile(basepath,[basename '.SWRunitMetrics.mat']),'SWRunitMetrics')
%%

function SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                    ripples,...
                                                    SWRunitMetrics,...
                                                    epochs,...
                                                    epoch_struct,...
                                                    epoch_search,...
                                                    epoch_label)
                                                
start_end = epoch_struct.(epochs{contains(epochs,epoch_search)});
if isfield(ripples,'times')
    idx = ripples.times(:,1) >= start_end(1) &...
        ripples.times(:,2) <= start_end(2);
    ripSpk = bz_getRipSpikes('basepath',basepath,...
                        'events',ripples.times(idx,:),...
                        'saveMat',false); 
elseif isfield(ripples,'timestamps')
    idx = ripples.timestamps(:,1) >= start_end(1) &...
        ripples.timestamps(:,2) <= start_end(2);
    ripSpk = bz_getRipSpikes('basepath',basepath,...
                        'events',ripples.timestamps(idx,:),...
                        'saveMat',false); 
end

SWRunitMetrics.(epoch_label) = bz_unitSWRmetrics(ripSpk);

end



