function parse_pre_task_post(session,basepath,basename,ripples,spikes)

for i = 1:length(session.epochs)
    epoch{i} = session.epochs{i}.name;
end
disp(epoch')
% idx = find(diff(find(contains(epoch,'sleep')))>1)
% pre = session.epochs{i}

epochs = {'pre','task','post'};

% x = input('pre/task/post ? (y/n)','s');
% if strcmp(x,'n')
%     x = input('list epoch','s');
% end
epoch_struct = [];
disp('manual for now...sorry')
disp('manipulate & run epoch_struct and type dbcont')
keyboard
if isempty(epoch_struct)
    epoch_struct.pre = [session.epochs{1}.startTime,session.epochs{3}.stopTime];
    epoch_struct.task = [session.epochs{4}.startTime,session.epochs{4}.stopTime];
    epoch_struct.post = [session.epochs{5}.startTime,session.epochs{8}.stopTime];
end
SWRunitMetrics = [];
if isfield(epoch_struct,'pre')
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
        basename,...
        ripples,...
        spikes,...
        SWRunitMetrics,...
        epochs,...
        epoch_struct,...
        'pre',...
        'pre');
end

if isfield(epoch_struct,'task')
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
        basename,...
        ripples,...
        spikes,...
        SWRunitMetrics,...
        epochs,...
        epoch_struct,...
        'task',...
        'task');
end
if isfield(epoch_struct,'post')
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
        basename,...
        ripples,...
        spikes,...
        SWRunitMetrics,...
        epochs,...
        epoch_struct,...
        'post',...
        'post');
end
save(fullfile(basepath,[basename '.SWRunitMetrics.mat']),'SWRunitMetrics')
end

function SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                    basename,...
                                                    ripples,...
                                                    spikes,...
                                                    SWRunitMetrics,...
                                                    epochs,...
                                                    epoch_struct,...
                                                    epoch_search,...
                                                    epoch_label)
                                                
start_end = epoch_struct.(epochs{contains(epochs,epoch_search)});
if isfield(ripples,'times')
    idx = ripples.times(:,1) >= start_end(1) &...
        ripples.times(:,2) <= start_end(2);
    
    ripSpk = bz_getRipSpikes('basepath',basepath,...
                            'basename',basename,...
                            'spikes',spikes,...
                            'events',ripples.times(idx,:),...
                            'saveMat',false); 
                        
elseif isfield(ripples,'timestamps')
    idx = ripples.timestamps(:,1) >= start_end(1) &...
        ripples.timestamps(:,2) <= start_end(2);
    
    ripSpk = bz_getRipSpikes('basepath',basepath,...
                            'basename',basename,...
                            'spikes',spikes,...
                            'events',ripples.timestamps(idx,:),...
                            'saveMat',false); 
end

SWRunitMetrics.(epoch_label) = bz_unitSWRmetrics(ripSpk);

end