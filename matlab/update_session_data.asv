%% GrosmarkAD
files_to_redo = {'A:\Data\GrosmarkAD\Cicero\Cicero_09012014',...
    'A:\Data\GrosmarkAD\Cicero\Cicero_09102014',...
    'A:\Data\GrosmarkAD\Cicero\Cicero_09172014',...
    'A:\Data\GrosmarkAD\Buddy\Buddy_06272013',...
    'A:\Data\GrosmarkAD\Achilles\Achilles_10252013',...
    'A:\Data\GrosmarkAD\Achilles\Achilles_11012013',...
    'A:\Data\GrosmarkAD\Gatsby\Gatsby_08022013',...
    'A:\Data\GrosmarkAD\Gatsby\Gatsby_08282013'};

basepath = files_to_redo{2};
basename = bz_BasenameFromBasepath(basepath);

%% rename spikes.cellinfo as to preserve that data
if exist(fullfile(basepath,[basename,'.spikes.cellinfo.mat']),'file') &&...
        ~exist(fullfile(basepath,[basename,'.spikes.cellinfo.legacy.mat']),'file')
    load(fullfile(basepath,[basename,'.spikes.cellinfo.mat']))
    save(fullfile(basepath,[basename,'.spikes.cellinfo.legacy.mat']))
end
%%
spikes = loadSpikes(...
                    'basepath',basepath,...
                    'saveMat',true,...
                    'format','Klustakwik',...
                    'getWaveformsFromDat',false,...
                    'getWaveformsFromSource',true...
                    );
%%
cell_metrics = ProcessCellMetrics('basepath',basepath,...
    'showGUI',false,...
    'spikes',spikes,...
    'getWaveformsFromDat',false);

if ~isfield(cell_metrics,'CA1depth') && isfield(cell_metrics,'Cell_Position')
    cell_metrics.CA1depth = cell_metrics.Cell_Position;
    save(fullfile(basepath,[basename '.cell_metrics.cellinfo.mat']),'cell_metrics')
elseif ~isfield(cell_metrics,'CA1depth')
    cell_metrics.CA1depth = cell_metrics.deepSuperficialDistance;
    save(fullfile(basepath,[basename '.cell_metrics.cellinfo.mat']),'cell_metrics')
end     

if sum(contains(cell_metrics.brainRegion,'Unknown')) == length(cell_metrics.brainRegion)
    
end
%% GUI to manually curate cell classification
cell_metrics = CellExplorer('metrics',cell_metrics);


%% make swr metrics
% load all ripples
load(fullfile(basepath,[basename,'.ripplesALL.event.mat']))
% load position behavior file in order to get epochs
load(fullfile(basepath,[basename,'.position.behavior.mat']))
% extract epochs
epoch_struct = position.Epochs;
epochs = fields(epoch_struct);
% set up empty var for swr struct
SWRunitMetrics = [];
% check through possible epoch types and add results to SWRunitMetrics
if any(contains(epochs,'PREEpoch'))
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                ripples,...
                                                SWRunitMetrics,...
                                                epochs,...
                                                epoch_struct,...
                                                'PREEpoch',...
                                                'pre');
end
if any(contains(epochs,'MazeEpoch')) 
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                ripples,...
                                                SWRunitMetrics,...
                                                epochs,...
                                                epoch_struct,...
                                                'MazeEpoch',...
                                                'task');    
end
if any(contains(epochs,'POSTEpoch')) 
    SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                ripples,...
                                                SWRunitMetrics,...
                                                epochs,...
                                                epoch_struct,...
                                                'POSTEpoch',...
                                                'post');    
end

save(fullfile(basepath,[basename '.SWRunitMetrics.mat']),'SWRunitMetrics')
%%

function SWRunitMetrics = calc_sliced_unitSWRmetrics(basepath,...
                                                    ripples,...
                                                    SWRunitMetrics,...
                                                    epochs,...
                                                    epoch_struct,...
                                                    epoch_search,...
                                                    epoch_label)
                                                
start_end = epoch_struct.(epochs{contains(epochs,epoch_search)});

idx = ripples.times(:,1) >= start_end(1) &...
    ripples.times(:,2) <= start_end(2);

ripSpk = bz_getRipSpikes('basepath',basepath,...
                        'events',ripples.times(idx,:),...
                        'saveMat',false);   

SWRunitMetrics.(epoch_label) = bz_unitSWRmetrics(ripSpk);

end



